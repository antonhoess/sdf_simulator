* Check, if it makes sense to use canvas-functions as xview(), xview_scroll(), canvasx() and it's y-counterparts - probalby they are only interesting, if all items stay on the canvas and not when deleting all items in each cycle.
* Check, if it is feasible to keep track of all elements created (drawn) on the canvas and update them instead of deleting all and creating them anew.
* Unify all function and variable names and also structure them more, e.g. pack them in classes if useful.
* scalable_canvas.py: Try to unify the two functions that scale coordinates (for creating drawing elements and for the scaled motion event) - attention: the order of multiplication and addition is changed and the mathematical inverse operator is used except for the invert_y.
* scalable_canvas.py: Instead of get_* and set_* use real getters and setters or remove the existing ones, if they are not really needed - also adapt function to return tuples for x and y instead of separate functions.
* Put more comments in the code.
* On the ScalableCanvas <Configure> event the objects can even move out of the window then changing the window size - this seems only to happen when the object got moved away from the origin before.
* How to handle the scale factors (10000., etc.) in vehicle_visu, especially when changing the velocity and acceleration or when adding further vehicles with different parameters.
* Test, if by choosing the element nearest to the mouse pointer on the canvas and keeping track of the association of the line segment, etc. to the vehicle/sensor, it is possible to select e.g. a sensor and interaxt with it (e.g. show a list of the recent measurements)
* Check, if complex numbers or a self defined type or tuples might make things easier with the (x, y) pairs. See http://effbot.org/zone/tkinter-complex-canvas.htm.
* Probably create a separate class than build the connection between the sensor and the vehicle, that gets measured. The problem occurs when visualizing the measurements, since the sensor does not know, which vehicle a specific measurement was from.
  -> Or just adapt the imperfect logic already implemented at SenvorVisu.draw() - handled_vehicles...
* Add lists for vehicles and sensors and allow e.g. to disable/enable them - and maybe further settings in a context menu or separate window when clicking on the sensor box.
